
	import java.util.logging.Logger;
	import java.text.DecimalFormat;
	import java.io.*;
	import java.time.*;
	
    import java.time.temporal.TemporalAdjusters;
	
	public class cuadroAmortizacion {

		private int tipoAmortizacion;
		private float intAmor;
		private char FPag;
		private double cuotaBase;
		private double cuotaBase2d;
		
		private float[] cuota = new float[320];
		private float[] interes = new float[320];
		private float[] capital = new float[320];
		private float[] capitalPte = new float[320];
		private LocalDate [] vcto = new LocalDate[320]; 

		private static DecimalFormat df2 = new DecimalFormat("#.###");	
		
		/**
		 * @return the cuota
		 */
		public float[] getCuota() {
			return cuota;
		}

		/**
		 * @param cuota the cuota to set
		 */
		public void setCuota(float[] cuota) {
			this.cuota = cuota;
		}

		/**
		 * @return the interes
		 */
		public float[] getInteres() {
			return interes;
		}

		/**
		 * @param interes the interes to set
		 */
		public void setInteres(float[] interes) {
			this.interes = interes;
		}

		/**
		 * @return the capital
		 */
		public float[] getCapital() {
			return capital;
		}

		/**
		 * @param capital the capital to set
		 */
		public void setCapital(float[] capital) {
			this.capital = capital;
		}

		/**
		 * @return the capitalPte
		 */
		public float[] getCapitalPte() {
			return capitalPte;
		}

		/**
		 * @param capitalPte the capitalPte to set
		 */
		public void setCapitalPte(float[] capitalPte) {
			this.capitalPte = capitalPte;
		}

		/**
		 * @return the cuotaBase2d
		 */
		public double getCuotaBase2d() {
			return cuotaBase2d;
		}

		/**
		 * @param cuotaBase2d the cuotaBase2d to set
		 */
		public void setCuotaBase2d(double cuotaBase2d) {
			this.cuotaBase2d = cuotaBase2d;
		}

		/**
		 * @return the cuotaBase
		 */
		public double getCuotaBase() {
			return cuotaBase;
		}

		/**
		 * @param cuotaBase the cuotaBase to set
		 */
		public void setCuotaBase(double cuotaBase) {
			this.cuotaBase = cuotaBase;
		}

		/**
		 * @return the periodicidad
		 */
		public int getPeriodicidad() {
			return periodicidad;
		}

		/**
		 * @param periodicidad the periodicidad to set
		 */
		public void setPeriodicidad(int periodicidad) {
			this.periodicidad = periodicidad;
		}

		/**
		 * @return the intAmor
		 */
		public float getIntAmor() {
			return intAmor;
		}

		/**
		 * @param intAmor the intAmor to set
		 */
		public void setIntAmor(float intAmor) {
			this.intAmor = intAmor;
		}

		private int mesesAnno;
		private float nominal;
		private float CAE;
		private float TIN;
		private float plazos;
		private float plazosCarencia=0;
		private float TAE;
		private int periodicidad;
		private int diaVcto;
				
		/**
		 * @return the tipoAmortizacion
		 */
		public int getTipoAmortizacion() {
			return tipoAmortizacion;
		}

		/**
		 * @param tipoAmortizacion the tipoAmortizacion to set
		 */
		public void setTipoAmortizacion(int tipoAmortizacion) {
			this.tipoAmortizacion = tipoAmortizacion;
		}

		/**
		 * @return the mesesAnno
		 */
		public int getMesesAnno() {
			return mesesAnno;
		}

		/**
		 * @param mesesAnno the mesesAnno to set
		 */
		public void setMesesAnno(int mesesAnno) {
			this.mesesAnno = mesesAnno;
		}

		/**
		 * @return the nominal
		 */
		public float getNominal() {
			return nominal;
		}

		/**
		 * @param nominal the nominal to set
		 */
		public void setNominal(float nominal) {
			this.nominal = nominal;
		}
		public void setdiaVcto(int diaVcto) {
			this.diaVcto = diaVcto;
		}
		/**
		 * @return the cAE
		 */
		public float getCAE() {
			return CAE;
		}

		/**
		 * @param cae the cAE to set
		 */
		public void setCAE(float cae) {
			CAE = cae;
		}

		/**
		 * @return the tIN
		 */
		public float getTIN() {
			return TIN;
		}

		/**
		 * @param tin the tIN to set
		 */
		public void setTIN(float tin) {
			TIN = tin;
		}

		/**
		 * @return the plazos
		 */
		public float getPlazos() {
			return plazos;
		}

		/**
		 * @param plazos the plazos to set
		 */
		public void setPlazos(float plazos) {
			this.plazos = plazos;
		}

		/**
		 * @return the tAE
		 */
		public float getTAE() {
			return TAE;
		}

		/**
		 * @param tae the tAE to set
		 */
		public void setTAE(float tae) {
			TAE = tae;
		}

		public int getdiaVcto() {
			return diaVcto;
		}
		
		public void calcularTAE() {
			double max=1.000001;
			double min=0.000001;
			float fi1=0;
			float fi2=0;
			float k=0;
			int wi=0;
			float platot=0;
			float taex=0;
			
			for (int i=0;i<50;i++) {
				k = (float)(max + min) / 2;
				platot = this.plazos + this.plazosCarencia;
				for (int n=1;n<=platot;n++) {
					wi = n;
					fi2 = this.cuota[wi - 1] / (float)Math.pow((1 + k), n);
					fi1 = fi1 + fi2;
//					System.out.println("fi2: " + df2.format(fi2) + " platot " + platot + " n " + n);
				}
				if (fi1<this.getNominal()) {
					max=k;
					fi1=0;
					fi2=0;
				}
				if (fi1>this.getNominal()) {
					min=k;
					fi1=0;
					fi2=0;
				}
				taex=(((float)Math.pow(1 + k, 12) - 1) * 100);
//				System.out.println("TAE: " + df2.format(taex));				
			}
			
			taex=(((float)Math.pow(1 + k, 12) - 1) * 100);
			
			this.setTAE(taex);
		}
		
		
		public cuadroAmortizacion(float nominal, float cae,  char fpag, float tin, float plazos, int diaVcto) {
			super();
			
			double razon;
			float CNVR;
			double nominalTrabajo;
			double amortizado;
			double interesesRend;
			double pendienteAmor;
			double cuotaFinal;
			double totalIntereses;
			double totalCuota=0;
			double totalCapital=0;
			this.setdiaVcto(diaVcto);
			this.setFPag(fpag);
			
			LocalDate fecha = LocalDate.now();
			
//			LocalDate vencimiento = LocalDate.of(2018,Month.MARCH,this.getdiaVcto());
			
			LocalDate vencimiento = fecha.plusMonths(1);
//			LocalDate vencimiento = fecha;
			if (this.getdiaVcto()==30)
				if (vencimiento.getMonth()!=Month.FEBRUARY)
					vencimiento.withDayOfMonth(this.getdiaVcto());
					else vencimiento.with(TemporalAdjusters.lastDayOfMonth());
			
			System.out.println(fecha.toString());
			System.out.println(vencimiento.toString());
			
			this.nominal = nominal;
			CAE = cae;
			TIN = tin;
			this.plazos = plazos;
			periodicidad=12;
			
			this.setdiaVcto(diaVcto);
			this.setTipoAmortizacion(12);
			this.setMesesAnno(12/tipoAmortizacion);
		
			this.intAmor=(this.getTIN() * this.getMesesAnno())/1200;
			
			CNVR=getTipoAmortizacion()/periodicidad;
			
			razon = 1 / (1 + Math.pow(this.getIntAmor(), CNVR));
			if (fpag!='F')
				this.setCuotaBase(getNominal()/		
						((razon * (Math.pow(razon, getPlazos()) - 1) / (razon - 1))));
			else
				this.setCuotaBase((getNominal() + cae )/		
						((razon * (Math.pow(razon, getPlazos()) - 1) / (razon - 1))));

			this.setCuotaBase2d(Math.round(this.getCuotaBase()));
			
			nominalTrabajo= this.getNominal();
			amortizado=0;
			pendienteAmor=nominalTrabajo;
			totalIntereses=0;
			
			for (int i=0;i<this.getPlazos();i++){
				nominalTrabajo = nominalTrabajo - amortizado;
				interesesRend = nominalTrabajo * this.getIntAmor();
				if (i==(plazos -1)){
					amortizado=pendienteAmor;
					if (amortizado >= this.getCuotaBase()) {
						cuotaFinal = amortizado + interesesRend;
						System.out.println("Ult " + cuotaFinal);
					}
					else {
						interesesRend = this.getCuotaBase() - amortizado;
					}
					pendienteAmor=0;
				}
				else{
					amortizado = this.getCuotaBase() - interesesRend;
					pendienteAmor = pendienteAmor - amortizado;
				}
				totalIntereses = totalIntereses + interesesRend;
				totalCuota = totalCuota + this.getCuotaBase();
				totalCapital = totalCapital + amortizado;
				this.cuota[i] = (float)this.getCuotaBase();
				if ((fpag=='R') && (i==0))
					this.cuota[i] = this.cuota[i] + cae;
				this.capital[i] = (float)amortizado;
				this.capitalPte[i] =(float)pendienteAmor;
				
//				System.out.println("Plazo :" + i + "Nominal : " + nominalTrabajo + "Intereses : " + interesesRend + "Amortizado : " + amortizado);
				System.out.println("Plazo :" + i + " Fecha :" + vencimiento.toString() + " Nominal : " + df2.format(nominalTrabajo) + " Intereses : " + df2.format(interesesRend) + " Amortizado : " + df2.format(amortizado));
				vencimiento=vencimiento.plusMonths(1);
				if (vencimiento.getMonth()!=Month.FEBRUARY) 
					vencimiento=vencimiento.withDayOfMonth(this.getdiaVcto());
				this.vcto[i]=vencimiento;
			}
			calcularTAE();
			System.out.println("Total intereses: " + df2.format(totalIntereses));
			System.out.println("Total cuota: " + df2.format(totalCuota));		
			System.out.println("Total capital: " + df2.format(totalCapital));
			System.out.println("TAE: " + df2.format(this.getTAE()) + "%");			
//			return(totalIntereses);
		}
		
		/**
		 * @param args
		 */
		public static void main(String[] args) {
			
			BufferedReader buff = new BufferedReader( new InputStreamReader( System.in));		

			float capitalInicial=0;
			float comisionApertura=0;
			float tipoDeInteres=0;
			float plazosPrestamo=0;
			int diaVencimiento=30;
			int k=0;
			String FPAG= new String();
			char formaPago;

//			cuadroAmortizacion p = new cuadroAmortizacion(1000,0,5,12);

			System.out.println("Importe: "); 
			try {
				capitalInicial = Integer.parseInt( buff.readLine());
				
			} catch (Exception e) { e.printStackTrace(); }
			
			
			System.out.println("Plazos: "); 
			try {
				plazosPrestamo = Integer.parseInt( buff.readLine());
			} catch (Exception e) { e.printStackTrace(); }

			System.out.println("TIN: "); 
			try {
				tipoDeInteres = Float.parseFloat( buff.readLine());
			} catch (Exception e) { e.printStackTrace(); }

			System.out.println("CAE: "); 
			try {
				comisionApertura = Float.parseFloat( buff.readLine());
			} catch (Exception e) { e.printStackTrace(); }			

			System.out.println("CAE (F/R): "); 
			try {
				FPAG = buff.readLine();
			} catch (Exception e) { e.printStackTrace(); }			
			
			formaPago=FPAG.charAt(0);
					
			System.out.println("DÃ­a de vencimiento: "); 
			try {
				diaVencimiento = Integer.parseInt( buff.readLine());
			} catch (Exception e) { e.printStackTrace(); }

			cuadroAmortizacion p = new cuadroAmortizacion(capitalInicial,comisionApertura,formaPago,tipoDeInteres,plazosPrestamo,diaVencimiento);

			Logger l = Logger.getLogger(cuadroAmortizacion.class.getName());
			l.info("Cuota base:" + p.getCuotaBase() + " Redondeada: " + p.getCuotaBase2d());
		
			System.out.println("Cuota base:" + df2.format(p.getCuotaBase()) + " Redondeada: " + p.getCuotaBase2d());

			for (int j=0;j<plazosPrestamo;j++) 
			System.out.println("Plazo :" + ++k + " Cuota : " + df2.format(p.cuota[j]));
			
		}

		public char getFPag() {
			return FPag;
		}

		public void setFPag(char fPag) {
			FPag = fPag;
		}

	}

